-- vim: ft=lua:ts=4:sw=4:et:ai:cin

-- !! WARNING !!
-- Do *NOT* modify this file for customization. Instead, create a `local.conf`
-- file from `local.conf.example` and make changes over there.

local _dir_ = debug.getinfo(1, "S").source:sub(2):match("(.*[/\\])") or "./"
if not string.find(package.path, _dir_ .. "lib/?.lua;", 1, true) then
    package.path = _dir_ .. "lib/?.lua;" .. _dir_ .. "lib/?/init.lua;" .. package.path
end
local utils = require("utils")
_G.T_ = require("tform") -- load into global env
local c_ = require("components")

-- config processing helpers
local function _load_local_conf()
    local env = { lcc = {}, conky = {} }
    setmetatable(env, { __index = _G }) -- local env with global fallback

    -- update local lcc settings into the global variable
    -- NOTE: __indexnew only gets called for an absent key, a second assignment
    -- won't change the global value
    setmetatable(env.lcc, { __newindex = function(t, k, v)
        if _G.lcc[k] == nil then _G.lcc[k] = {} end
        utils.update_table(_G.lcc[k], v)
        rawset(t, k, v)
    end
    })
    utils.load_in_env(_dir_ .. "local.conf", env)
    setmetatable(env, nil)
    return env
end

-- LCC specific settings
_G.lcc = {}
-- NOTE: lcc must be in global env for other globally scoped functions to use
-- (e.g. `T_.sc` in tform.lua)

lcc.config = {
    scale = 1 -- scale the whole panel (>1 to enlarge, <1 to shrink)
}

local local_conf = _load_local_conf()
-- NOTE: now custom lcc.config.scale (if specified in local.conf) is effective,
-- and transform functions will work properly for global settings below.

-- font definitions
lcc.fonts = {
    icon = T_ "LeanConkyConfig:normal:size=$sc{12}", -- icons
    icon_s = T_ "LeanConkyConfig:normal:size=$sc{8.5}", -- icons (small)
    h1 = T_ "sans-serif:bold:size=$sc{10}", -- heading 1
    h2 = T_ "sans-serif:bold:size=$sc{8}", -- heading 2
    date = T_ "sans-serif:normal:size=$sc{18}", -- date
    week = T_ "sans-serif:bold:size=$sc{7}", -- week
    year = T_ "sans-serif:normal:size=$sc{7}", -- year
    time = T_ "LeanConkyConfig:normal:size=$sc{18}", -- time
    time_alt = T_ "sans-serif:bold:size=$sc{18}" -- time (fallback)
}

-- define panel with components
lcc.panel_presets = {
    default = {
        c_.datetime(),
        c_.system(),
        c_.cpu(),
        c_.memory(),
        c_.storage(),
        c_.network(),
        c_.voffset(-20), -- hack: remove excessive space
    }
}
lcc.panel = lcc.panel_presets.default

-- Conky settings
conky = conky or {} -- conky is nil when loaded by main.lua
conky.config = {
    alignment = "top_right",
    background = false,
    border_inner_margin = T_.sr(8),
    border_outer_margin = T_.sr(0),
    border_width = T_.sr(1),
    cpu_avg_samples = 2,
    default_color = "white",
    default_outline_color = "#555555",
    default_shade_color = "#555555",
    diskio_avg_samples = 2,
    double_buffer = true,
    draw_borders = false,
    draw_graph_borders = true,
    draw_outline = true,
    draw_shades = false,
    extra_newline = false,
    font = T_ "sans-serif:normal:size=$sc{8}",
    gap_x = 0,
    gap_y = 0,
    lua_load = _dir_ .. "main.lua",
    maximum_width = T_.sr(270),
    minimum_height = T_.sr(320),
    minimum_width = T_.sr(270),
    net_avg_samples = 2,
    no_buffers = true,
    out_to_console = false,
    out_to_stderr = false,
    override_utf8_locale = true,
    own_window = true,
    own_window_argb_value = 128,
    own_window_argb_visual = true,
    own_window_class = "Conky",
    own_window_hints = "undecorated,below,sticky,skip_taskbar,skip_pager",
    own_window_transparent = false,
    show_graph_range = false,
    show_graph_scale = false,
    stippled_borders = T_.sr(0),
    update_interval = 2,
    uppercase = false,
    use_spacer = "none",
    use_xft = true,
    xinerama_head = 0,
    -- COLORS --
    color0 = "white", -- clock color
    color1 = "white", -- heading 1 color
    color2 = "white", -- heading 2 color
    color3 = "lightgray", -- chart color
}

conky.text = T_(table.concat(lcc.panel, "\n"))

-- update global settings with custom values
utils.update_table(lcc.fonts, local_conf.lcc.fonts)
utils.update_table(conky.config, local_conf.conky.config)

-- NOTE: for backward compatibility, will be deprecated in a future release
utils.update_table(lcc.fonts, local_conf.local_fonts)
utils.update_table(conky.config, local_conf.local_config)
